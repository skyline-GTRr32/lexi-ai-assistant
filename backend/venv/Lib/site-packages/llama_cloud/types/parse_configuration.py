# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .llama_parse_parameters import LlamaParseParameters

try:
    import pydantic
    if pydantic.__version__.startswith("1."):
        raise ImportError
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ParseConfiguration(pydantic.BaseModel):
    """
    Parse configuration schema.
    """

    id: str = pydantic.Field(description="Unique identifier for the parse configuration")
    name: str = pydantic.Field(description="Name of the parse configuration")
    source_type: str = pydantic.Field(description="Type of the source (e.g., 'project')")
    source_id: str = pydantic.Field(description="ID of the source")
    creator: typing.Optional[str]
    version: str = pydantic.Field(description="Version of the configuration")
    parameters: LlamaParseParameters = pydantic.Field(description="LlamaParseParameters configuration")
    created_at: dt.datetime = pydantic.Field(description="Creation timestamp")
    updated_at: dt.datetime = pydantic.Field(description="Last update timestamp")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
